{
  "api/NPCEngine.API.Classification.html": {
    "href": "api/NPCEngine.API.Classification.html",
    "title": "Class Classification | npc-engine Unity integration",
    "keywords": "Class Classification Classification services RPC Interface. Inheritance Object Classification Namespace : NPCEngine.API Assembly : cs.temp.dll.dll Syntax public class Classification : RPCBase Methods Classify(String, List<String>, Action<List<List<Single>>>) Declaration public IEnumerator Classify(string query, List<string> context, Action<List<List<float>>> outputCallback) Parameters Type Name Description String query List < String > context Action < List < List < Single >>> outputCallback Returns Type Description IEnumerator"
  },
  "api/NPCEngine.API.Control.html": {
    "href": "api/NPCEngine.API.Control.html",
    "title": "Class Control | npc-engine Unity integration",
    "keywords": "Class Control Control provides RPC interface to control service. Inheritance Object Control Namespace : NPCEngine.API Assembly : cs.temp.dll.dll Syntax public class Control : RPCBase Methods GetServiceMetadata(String, Action<ServiceMetadata>) Get metadata for one service. Declaration public IEnumerator GetServiceMetadata(string service_id, Action<ServiceMetadata> outputCallback) Parameters Type Name Description String service_id Resolvable service name (i.e. id, type or API name) Action < ServiceMetadata > outputCallback Callback action to consume results. Returns Type Description IEnumerator ServiceMetadata for resolved service. GetServiceMetadataFuture(String) Declaration public ResultFuture<ServiceMetadata> GetServiceMetadataFuture(string service_id) Parameters Type Name Description String service_id Returns Type Description ResultFuture < ServiceMetadata > GetServicesMetadata(Action<List<ServiceMetadata>>) Get metadata for all the services. Declaration public IEnumerator GetServicesMetadata(Action<List<ServiceMetadata>> outputCallback) Parameters Type Name Description Action < List < ServiceMetadata >> outputCallback Callback action to consume results. Returns Type Description IEnumerator A list of ServiceMetadata for each service. GetServicesMetadataFuture() Declaration public ResultFuture<List<ServiceMetadata>> GetServicesMetadataFuture() Returns Type Description ResultFuture < List < ServiceMetadata >> GetServiceStatus(String, Action<ServiceStatus>) Get service status. Declaration public IEnumerator GetServiceStatus(string service_id, Action<ServiceStatus> outputCallback) Parameters Type Name Description String service_id Action < ServiceStatus > outputCallback Returns Type Description IEnumerator GetServiceStatusFuture(String) Declaration public ResultFuture<ServiceStatus> GetServiceStatusFuture(string service_id) Parameters Type Name Description String service_id Returns Type Description ResultFuture < ServiceStatus > RestartService(String) Restart service. Declaration public IEnumerator RestartService(string service_id) Parameters Type Name Description String service_id Resolvable service name (i.e. id, type or API name) Returns Type Description IEnumerator StartService(String) Declaration public IEnumerator StartService(string service_id) Parameters Type Name Description String service_id Returns Type Description IEnumerator StartServiceNoConfirm(String) Declaration public void StartServiceNoConfirm(string service_id) Parameters Type Name Description String service_id StopService(String) Declaration public IEnumerator StopService(string service_id) Parameters Type Name Description String service_id Returns Type Description IEnumerator StopServiceNoConfirm(String) Declaration public void StopServiceNoConfirm(string service_id) Parameters Type Name Description String service_id"
  },
  "api/NPCEngine.API.html": {
    "href": "api/NPCEngine.API.html",
    "title": "Namespace NPCEngine.API | npc-engine Unity integration",
    "keywords": "Namespace NPCEngine.API Classes Classification Classification services RPC Interface. Control Control provides RPC interface to control service. PersonaDialogue Chatbot provides remote procedure calls to inference engine's TextGeneration services. SemanticQuery Static class SemanticQuery provides remote procedure calls to inference engine's Semantic similarity model. Prefer predefining queries via PredefineQuery and then using QueryPredefined instead of directly using Query ServiceMetadata Data class containing service metadata. SpeechToText Static class SpeechToText provides remote procedure calls to inference engine's speech to text module. TextGeneration<ContextType> Chatbot provides remote procedure calls to inference engine's TextGeneration services. TextToSpeech Static class TextToSpeech provides remote procedure calls to inference engine's text to speech module. Enums ServiceStatus Service status enum."
  },
  "api/NPCEngine.API.PersonaDialogue.html": {
    "href": "api/NPCEngine.API.PersonaDialogue.html",
    "title": "Class PersonaDialogue | npc-engine Unity integration",
    "keywords": "Class PersonaDialogue Chatbot provides remote procedure calls to inference engine's TextGeneration services. Inheritance Object PersonaDialogue Namespace : NPCEngine.API Assembly : cs.temp.dll.dll Syntax public class PersonaDialogue : RPCBase Methods StartDialogue(String, String, String, String, String, String, Action<String>, String) Declaration public IEnumerator StartDialogue(string name1, string persona1, string name2, string persona2, string location_name, string location_description, Action<string> outputCallback, string dialogue_id = null) Parameters Type Name Description String name1 String persona1 String name2 String persona2 String location_name String location_description Action < String > outputCallback String dialogue_id Returns Type Description IEnumerator StepDialogue(String, String, Boolean, Action<Tuple<String, Boolean>>, Single, List<String>, String) Step dialogue. If utterance is null, it will be generated. If scripted utterances are not null they will be compared to the utterance and replace it if similarity score is above scripted_threshold (score is in range [0,1]). If update_history is true, the dialogue history will be updated with the utterance. Declaration public IEnumerator StepDialogue(string dialogue_id, string speaker_id, bool update_history, Action<Tuple<string, bool>> outputCallback, float scripted_threshold = 0.5F, List<string> scripted_utterances = null, string utterance = null) Parameters Type Name Description String dialogue_id String speaker_id Boolean update_history Action < Tuple < String , Boolean >> outputCallback Callback that accepts results: Tuple with utterance and bool flag that is True if scripted utterance was used Single scripted_threshold List < String > scripted_utterances String utterance Returns Type Description IEnumerator"
  },
  "api/NPCEngine.API.SemanticQuery.html": {
    "href": "api/NPCEngine.API.SemanticQuery.html",
    "title": "Class SemanticQuery | npc-engine Unity integration",
    "keywords": "Class SemanticQuery Static class SemanticQuery provides remote procedure calls to inference engine's Semantic similarity model. Prefer predefining queries via PredefineQuery and then using QueryPredefined instead of directly using Query Inheritance Object SemanticQuery Namespace : NPCEngine.API Assembly : cs.temp.dll.dll Syntax public class SemanticQuery : RPCBase Methods Cache(List<String>) Declaration public void Cache(List<string> queryIds) Parameters Type Name Description List < String > queryIds Compare(String, List<String>, Action<List<Single>>) Declaration public IEnumerator Compare(string query, List<string> context, Action<List<float>> outputCallback) Parameters Type Name Description String query List < String > context Action < List < Single >> outputCallback Returns Type Description IEnumerator CompareFuture(String, List<String>) Declaration public ResultFuture<List<float>> CompareFuture(string query, List<string> context) Parameters Type Name Description String query List < String > context Returns Type Description ResultFuture < List < Single >>"
  },
  "api/NPCEngine.API.ServiceMetadata.html": {
    "href": "api/NPCEngine.API.ServiceMetadata.html",
    "title": "Class ServiceMetadata | npc-engine Unity integration",
    "keywords": "Class ServiceMetadata Data class containing service metadata. Inheritance Object ServiceMetadata Namespace : NPCEngine.API Assembly : cs.temp.dll.dll Syntax public class ServiceMetadata Fields api_name Name of the API class. Declaration public string api_name Field Value Type Description String id ID of the service. Declaration public string id Field Value Type Description String path Path to the service's folder. Declaration public string path Field Value Type Description String readme Model specific readme. Declaration public string readme Field Value Type Description String service Name of the service class. Declaration public string service Field Value Type Description String service_description Long service class description Declaration public string service_description Field Value Type Description String service_short_description Short service class description Declaration public string service_short_description Field Value Type Description String"
  },
  "api/NPCEngine.API.ServiceStatus.html": {
    "href": "api/NPCEngine.API.ServiceStatus.html",
    "title": "Enum ServiceStatus | npc-engine Unity integration",
    "keywords": "Enum ServiceStatus Service status enum. Namespace : NPCEngine.API Assembly : cs.temp.dll.dll Syntax public enum ServiceStatus Fields Name Description AWAITING ERROR RUNNING STARTING STOPPED TIMEOUT UNKNOWN"
  },
  "api/NPCEngine.API.SpeechToText.html": {
    "href": "api/NPCEngine.API.SpeechToText.html",
    "title": "Class SpeechToText | npc-engine Unity integration",
    "keywords": "Class SpeechToText Static class SpeechToText provides remote procedure calls to inference engine's speech to text module. Inheritance Object SpeechToText Namespace : NPCEngine.API Assembly : cs.temp.dll.dll Syntax public class SpeechToText : RPCBase Methods GetDevices(Action<List<String>>) Declaration public IEnumerator GetDevices(Action<List<string>> outputCallback) Parameters Type Name Description Action < List < String >> outputCallback Returns Type Description IEnumerator GetDevicesFuture() Declaration public ResultFuture<List<string>> GetDevicesFuture() Returns Type Description ResultFuture < List < String >> InitializeMicrophoneInput() Declaration public IEnumerator InitializeMicrophoneInput() Returns Type Description IEnumerator Listen(String, Action<String>) Declaration public IEnumerator Listen(string context, Action<string> outputCallback) Parameters Type Name Description String context Action < String > outputCallback Returns Type Description IEnumerator ListenFuture(String) Declaration public ResultFuture<string> ListenFuture(string context) Parameters Type Name Description String context Returns Type Description ResultFuture < String > SetDevice(Int32, Action<List<String>>) Declaration public IEnumerator SetDevice(int deviceId, Action<List<string>> outputCallback) Parameters Type Name Description Int32 deviceId Action < List < String >> outputCallback Returns Type Description IEnumerator SetDeviceFuture(Int32) Declaration public ResultFuture<List<string>> SetDeviceFuture(int deviceId) Parameters Type Name Description Int32 deviceId Returns Type Description ResultFuture < List < String >> Transcribe(List<Single>, Action<String>) Declaration public IEnumerator Transcribe(List<float> audio, Action<string> outputCallback) Parameters Type Name Description List < Single > audio Action < String > outputCallback Returns Type Description IEnumerator TranscribeFuture(List<Single>) Declaration public ResultFuture<string> TranscribeFuture(List<float> audio) Parameters Type Name Description List < Single > audio Returns Type Description ResultFuture < String >"
  },
  "api/NPCEngine.API.TextGeneration-1.html": {
    "href": "api/NPCEngine.API.TextGeneration-1.html",
    "title": "Class TextGeneration<ContextType> | npc-engine Unity integration",
    "keywords": "Class TextGeneration<ContextType> Chatbot provides remote procedure calls to inference engine's TextGeneration services. Inheritance Object TextGeneration<ContextType> Namespace : NPCEngine.API Assembly : cs.temp.dll.dll Syntax public class TextGeneration<ContextType> : RPCBase where ContextType : new() Type Parameters Name Description ContextType Methods GenerateReply(ContextType, Action<String>, Single, Int32) Declaration public IEnumerator GenerateReply(ContextType context, Action<string> outputCallback, float temperature = 0.8F, int topk = 5) Parameters Type Name Description ContextType context Action < String > outputCallback Single temperature Int32 topk Returns Type Description IEnumerator GenerateReplyFuture(ContextType, Single, Int32) Declaration public ResultFuture<string> GenerateReplyFuture(ContextType context, float temperature = 0.8F, int topk = 5) Parameters Type Name Description ContextType context Single temperature Int32 topk Returns Type Description ResultFuture < String > GetPromptTemplate(Action<String>) Declaration public IEnumerator GetPromptTemplate(Action<string> outputCallback) Parameters Type Name Description Action < String > outputCallback Returns Type Description IEnumerator GetPromptTemplateFuture() Declaration public ResultFuture<string> GetPromptTemplateFuture() Returns Type Description ResultFuture < String > GetSpecialTokens(Action<Dictionary<String, String>>) Declaration public IEnumerator GetSpecialTokens(Action<Dictionary<string, string>> outputCallback) Parameters Type Name Description Action < Dictionary < String , String >> outputCallback Returns Type Description IEnumerator GetSpecialTokensFuture() Declaration public ResultFuture<Dictionary<string, string>> GetSpecialTokensFuture() Returns Type Description ResultFuture < Dictionary < String , String >>"
  },
  "api/NPCEngine.API.TextToSpeech.html": {
    "href": "api/NPCEngine.API.TextToSpeech.html",
    "title": "Class TextToSpeech | npc-engine Unity integration",
    "keywords": "Class TextToSpeech Static class TextToSpeech provides remote procedure calls to inference engine's text to speech module. Inheritance Object TextToSpeech Namespace : NPCEngine.API Assembly : cs.temp.dll.dll Syntax public class TextToSpeech : RPCBase Methods GetNextResult(Action<List<Single>>) Declaration public IEnumerator GetNextResult(Action<List<float>> outputCallback) Parameters Type Name Description Action < List < Single >> outputCallback Returns Type Description IEnumerator GetNextResultFuture() Declaration public ResultFuture<List<float>> GetNextResultFuture() Returns Type Description ResultFuture < List < Single >> GetSpeakerIdsFuture() Declaration public ResultFuture<List<string>> GetSpeakerIdsFuture() Returns Type Description ResultFuture < List < String >> StartTTS(String, String, Int32, Action) Declaration public IEnumerator StartTTS(string voiceId, string line, int n_chunks, Action outputCallback) Parameters Type Name Description String voiceId String line Int32 n_chunks Action outputCallback Returns Type Description IEnumerator StartTTSFuture(String, String, Int32) Declaration public void StartTTSFuture(string speaker_id, string text, int n_chunks = 1) Parameters Type Name Description String speaker_id String text Int32 n_chunks"
  },
  "api/NPCEngine.Components.AbstractDialogueSystem.html": {
    "href": "api/NPCEngine.Components.AbstractDialogueSystem.html",
    "title": "Class AbstractDialogueSystem | npc-engine Unity integration",
    "keywords": "Class AbstractDialogueSystem Abstract class for dialogue system integration. Concrete implementations are used by NonPlayerCharacter component for scripted replies. Inheritance Object AbstractDialogueSystem Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public abstract class AbstractDialogueSystem : MonoBehaviour Methods CurrentNodeIsPlayer() Returns true if it's players turn in the dialogue. Declaration public abstract bool CurrentNodeIsPlayer() Returns Type Description Boolean CurrentNodeNPCAudio() Get the current node's audio for the NPC line (Never called for player). Return null if no audio is set or if the node is player. Declaration public abstract AudioClip CurrentNodeNPCAudio() Returns Type Description AudioClip CurrentNodeNPCLine() If the current node is NPC, return the NPC's line. else return empty string. Declaration public abstract string CurrentNodeNPCLine() Returns Type Description String CurrentNodeThreshold() Get the semantic similarity threshold for the current node in the dialogue. Return -1 if no threshold is set. Declaration public abstract float CurrentNodeThreshold() Returns Type Description Single EndDialog() Will be called when dialogue ends. Declaration public abstract void EndDialog() GetCurrentNodeOptions() Get the lines associated with the current node in the dialogue. Declaration public abstract List<string> GetCurrentNodeOptions() Returns Type Description List < String > GetCurrentNodeTopics() Get the short abstract descriptions of the lines associated with the current node in the dialogue. Declaration public abstract List<string> GetCurrentNodeTopics() Returns Type Description List < String > Next() Move to the next node in the dialogue. Declaration public abstract void Next() SelectOption(Int32) Select a line from the current node in the dialogue. Declaration public abstract void SelectOption(int optionId) Parameters Type Name Description Int32 optionId StartDialogue() Will be called when dialogue starts. Declaration public abstract void StartDialogue()"
  },
  "api/NPCEngine.Components.AbstractSpeechToText.html": {
    "href": "api/NPCEngine.Components.AbstractSpeechToText.html",
    "title": "Class AbstractSpeechToText | npc-engine Unity integration",
    "keywords": "Class AbstractSpeechToText Abstract class for speech to text system. Concrete implementations are used by PlayerCharacter component for receiving speech. Inheritance Object AbstractSpeechToText DictationRecognizerSTT NPCEngineSTT Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public abstract class AbstractSpeechToText : MonoBehaviour Properties Context Consumed context to be used in the next STT request Declaration public string Context { protected get; set; } Property Value Type Description String Methods SpeechRecognized(String) Declaration protected void SpeechRecognized(string result) Parameters Type Name Description String result StartListening() Called when system must start listening for speech. Declaration public abstract void StartListening() StopListening() Called when system should stop listening for speech. Declaration public abstract void StopListening() Events OnSpeechRecognitionFailed Can be used to handle speech recogintion errors Declaration public event Action<string> OnSpeechRecognitionFailed Event Type Type Description Action < String > OnSpeechRecognized PlayerCharacter subscribes to this event to get the Speech-to-Text result Declaration public event Action<string> OnSpeechRecognized Event Type Type Description Action < String >"
  },
  "api/NPCEngine.Components.ChatLine.html": {
    "href": "api/NPCEngine.Components.ChatLine.html",
    "title": "Class ChatLine | npc-engine Unity integration",
    "keywords": "Class ChatLine Inheritance Object ChatLine Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class ChatLine Fields line Declaration public string line Field Value Type Description String speaker Declaration public string speaker Field Value Type Description String"
  },
  "api/NPCEngine.Components.ColliderLocationTrigger.html": {
    "href": "api/NPCEngine.Components.ColliderLocationTrigger.html",
    "title": "Class ColliderLocationTrigger | npc-engine Unity integration",
    "keywords": "Class ColliderLocationTrigger Simple collider trigger that sets location in PlayerCharacter Inheritance Object ColliderLocationTrigger Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class ColliderLocationTrigger : MonoBehaviour Fields locationCollider Declaration public Collider locationCollider Field Value Type Description Collider locationDescription Declaration public string locationDescription Field Value Type Description String locationName Declaration public string locationName Field Value Type Description String"
  },
  "api/NPCEngine.Components.DialogueUI.html": {
    "href": "api/NPCEngine.Components.DialogueUI.html",
    "title": "Class DialogueUI | npc-engine Unity integration",
    "keywords": "Class DialogueUI Simple UI script that uses NonPlayerCharacter callbacks. Inheritance Object DialogueUI Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class DialogueUI : MonoBehaviour Fields dialogueHistory Text field for the dialogue. Declaration protected Text dialogueHistory Field Value Type Description Text dialogueTopics Text field for the topics of the possible dialogue options. Declaration protected Text dialogueTopics Field Value Type Description Text highlightColor Declaration public Color highlightColor Field Value Type Description Color lineLimit Line limit for the text field. Declaration public int lineLimit Field Value Type Description Int32 uiObject Gameobject that will be enabled, disabled and oriented towards the player. Declaration public GameObject uiObject Field Value Type Description GameObject usernameColor Declaration public Color usernameColor Field Value Type Description Color Methods AddLine(ChatLine, Boolean) Adds the given text to the dialogue history. Used with the OnDialogueLine callback. Declaration public void AddLine(ChatLine chatLine, bool highlight = false) Parameters Type Name Description ChatLine chatLine Boolean highlight Disable() Declaration public void Disable() Enable() Declaration public void Enable() UpdateTopics(List<String>) Updates the dialogue topics. Used with NonPlayerCharacter.OnTopicHintsUpdate. Declaration public void UpdateTopics(List<string> topics) Parameters Type Name Description List < String > topics"
  },
  "api/NPCEngine.Components.DictationRecognizerSTT.html": {
    "href": "api/NPCEngine.Components.DictationRecognizerSTT.html",
    "title": "Class DictationRecognizerSTT | npc-engine Unity integration",
    "keywords": "Class DictationRecognizerSTT Inheritance Object AbstractSpeechToText DictationRecognizerSTT Inherited Members AbstractSpeechToText.Context AbstractSpeechToText.OnSpeechRecognized AbstractSpeechToText.OnSpeechRecognitionFailed AbstractSpeechToText.SpeechRecognized(String) Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class DictationRecognizerSTT : AbstractSpeechToText Fields debugLogs Declaration public bool debugLogs Field Value Type Description Boolean Properties PolicyNotAccepted Declaration public bool PolicyNotAccepted { get; } Property Value Type Description Boolean RecognizerStarted Declaration public bool RecognizerStarted { get; } Property Value Type Description Boolean Methods StartListening() Declaration public override void StartListening() Overrides AbstractSpeechToText.StartListening() StopListening() Declaration public override void StopListening() Overrides AbstractSpeechToText.StopListening()"
  },
  "api/NPCEngine.Components.FantasyChatbotContext.html": {
    "href": "api/NPCEngine.Components.FantasyChatbotContext.html",
    "title": "Class FantasyChatbotContext | npc-engine Unity integration",
    "keywords": "Class FantasyChatbotContext Inheritance Object FantasyChatbotContext Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class FantasyChatbotContext Fields history Declaration public List<ChatLine> history Field Value Type Description List < ChatLine > location Declaration public string location Field Value Type Description String location_name Declaration public string location_name Field Value Type Description String name Declaration public string name Field Value Type Description String other_name Declaration public string other_name Field Value Type Description String other_persona Declaration public string other_persona Field Value Type Description String persona Declaration public string persona Field Value Type Description String"
  },
  "api/NPCEngine.Components.FantasyChatbotTextGeneration.html": {
    "href": "api/NPCEngine.Components.FantasyChatbotTextGeneration.html",
    "title": "Class FantasyChatbotTextGeneration | npc-engine Unity integration",
    "keywords": "Class FantasyChatbotTextGeneration Inheritance Object FantasyChatbotTextGeneration Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class FantasyChatbotTextGeneration : TextGeneration<FantasyChatbotContext>"
  },
  "api/NPCEngine.Components.html": {
    "href": "api/NPCEngine.Components.html",
    "title": "Namespace NPCEngine.Components | npc-engine Unity integration",
    "keywords": "Namespace NPCEngine.Components Classes AbstractDialogueSystem Abstract class for dialogue system integration. Concrete implementations are used by NonPlayerCharacter component for scripted replies. AbstractSpeechToText Abstract class for speech to text system. Concrete implementations are used by PlayerCharacter component for receiving speech. ChatLine ColliderLocationTrigger Simple collider trigger that sets location in PlayerCharacter DialogueUI Simple UI script that uses NonPlayerCharacter callbacks. DictationRecognizerSTT FantasyChatbotContext FantasyChatbotTextGeneration NonPlayerCharacter NPCEngineManager NPCEngineSTT PlayerCharacter"
  },
  "api/NPCEngine.Components.NonPlayerCharacter.html": {
    "href": "api/NPCEngine.Components.NonPlayerCharacter.html",
    "title": "Class NonPlayerCharacter | npc-engine Unity integration",
    "keywords": "Class NonPlayerCharacter Inheritance Object NonPlayerCharacter Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class NonPlayerCharacter : MonoBehaviour Fields audioSourceQueue Declaration public AudioSourceQueue audioSourceQueue Field Value Type Description AudioSourceQueue characterName Declaration public string characterName Field Value Type Description String defaultThreshold Declaration public float defaultThreshold Field Value Type Description Single dialogueSystem Declaration public AbstractDialogueSystem dialogueSystem Field Value Type Description AbstractDialogueSystem history Declaration public List<ChatLine> history Field Value Type Description List < ChatLine > nChunksTextGeneration Declaration public int nChunksTextGeneration Field Value Type Description Int32 OnDialogueEnd Declaration public UnityEvent OnDialogueEnd Field Value Type Description UnityEvent OnDialogueLine Declaration public UnityEvent<ChatLine, bool> OnDialogueLine Field Value Type Description UnityEvent < ChatLine , Boolean > OnDialogueStart Declaration public UnityEvent OnDialogueStart Field Value Type Description UnityEvent OnProcessingEnd Declaration public UnityEvent OnProcessingEnd Field Value Type Description UnityEvent OnProcessingStart Declaration public UnityEvent OnProcessingStart Field Value Type Description UnityEvent OnTopicHintsUpdate Declaration public UnityEvent<List<string>> OnTopicHintsUpdate Field Value Type Description UnityEvent < List < String >> persona Declaration public string persona Field Value Type Description String temperature Declaration public float temperature Field Value Type Description Single topK Declaration public int topK Field Value Type Description Int32 voiceId Declaration public string voiceId Field Value Type Description String Methods EndDialog() Declaration public void EndDialog() GenerateAndPlaySpeech(String) Declaration public IEnumerator GenerateAndPlaySpeech(string line) Parameters Type Name Description String line Returns Type Description IEnumerator GenerateReply(String, String, String) Declaration public IEnumerator GenerateReply(string otherName, string otherPersona, string line) Parameters Type Name Description String otherName String otherPersona String line Returns Type Description IEnumerator HandleLine(String, String, String) Declaration public void HandleLine(string otherName, string otherPersona, string line) Parameters Type Name Description String otherName String otherPersona String line HandleLineCoroutine(String, String, String) Declaration public IEnumerator HandleLineCoroutine(string otherName, string otherPersona, string line) Parameters Type Name Description String otherName String otherPersona String line Returns Type Description IEnumerator HandlePlayerLineCoroutine(String, String, String) Declaration public IEnumerator HandlePlayerLineCoroutine(string otherName, string otherPersona, string line) Parameters Type Name Description String otherName String otherPersona String line Returns Type Description IEnumerator SayNPCLines() Declaration public IEnumerator SayNPCLines() Returns Type Description IEnumerator StartDialogue() Declaration public void StartDialogue()"
  },
  "api/NPCEngine.Components.NPCEngineManager.html": {
    "href": "api/NPCEngine.Components.NPCEngineManager.html",
    "title": "Class NPCEngineManager | npc-engine Unity integration",
    "keywords": "Class NPCEngineManager Inheritance Object NPCEngineManager Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class NPCEngineManager : Singleton<NPCEngineManager> Properties InferenceEngineProcessId Declaration protected int InferenceEngineProcessId { get; set; } Property Value Type Description Int32 InferenceEngineRunning Declaration public bool InferenceEngineRunning { get; } Property Value Type Description Boolean Services Declaration public List<ServiceMetadata> Services { get; } Property Value Type Description List < ServiceMetadata > ServicesById Declaration public Dictionary<string, ServiceMetadata> ServicesById { get; } Property Value Type Description Dictionary < String , ServiceMetadata > ServiceStatuses Declaration public List<ServiceStatus> ServiceStatuses { get; } Property Value Type Description List < ServiceStatus > ServiceStatusesById Declaration public Dictionary<string, ServiceStatus> ServiceStatusesById { get; } Property Value Type Description Dictionary < String , ServiceStatus > Methods DownloadModel(String) Declaration public void DownloadModel(string id) Parameters Type Name Description String id GetAPI<T>() Declaration public T GetAPI<T>() where T : RPCBase Returns Type Description T Type Parameters Name Description T GetAPI<T>(String) Declaration public T GetAPI<T>(string id) where T : RPCBase Parameters Type Name Description String id Returns Type Description T Type Parameters Name Description T StartInferenceEngine() Declaration public void StartInferenceEngine() StopInferenceEngine() Declaration public void StopInferenceEngine() UpdateServices() Declaration public IEnumerator UpdateServices() Returns Type Description IEnumerator UpdateServiceStatuses() Declaration public IEnumerator UpdateServiceStatuses() Returns Type Description IEnumerator"
  },
  "api/NPCEngine.Components.NPCEngineSTT.html": {
    "href": "api/NPCEngine.Components.NPCEngineSTT.html",
    "title": "Class NPCEngineSTT | npc-engine Unity integration",
    "keywords": "Class NPCEngineSTT Inheritance Object AbstractSpeechToText NPCEngineSTT Inherited Members AbstractSpeechToText.Context AbstractSpeechToText.OnSpeechRecognized AbstractSpeechToText.OnSpeechRecognitionFailed AbstractSpeechToText.SpeechRecognized(String) Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class NPCEngineSTT : AbstractSpeechToText Methods CallSpeechToText() Declaration public void CallSpeechToText() StartListening() Declaration public override void StartListening() Overrides AbstractSpeechToText.StartListening() StopListening() Declaration public override void StopListening() Overrides AbstractSpeechToText.StopListening()"
  },
  "api/NPCEngine.Components.PlayerCharacter.html": {
    "href": "api/NPCEngine.Components.PlayerCharacter.html",
    "title": "Class PlayerCharacter | npc-engine Unity integration",
    "keywords": "Class PlayerCharacter Inheritance Object PlayerCharacter Namespace : NPCEngine.Components Assembly : cs.temp.dll.dll Syntax public class PlayerCharacter : Singleton<PlayerCharacter> Fields characterName Declaration public string characterName Field Value Type Description String CheckCamera Declaration public Camera CheckCamera Field Value Type Description Camera HorizontalMargin Declaration public float HorizontalMargin Field Value Type Description Single MaxRange Declaration public float MaxRange Field Value Type Description Single persona Declaration public string persona Field Value Type Description String settingDescription Declaration public string settingDescription Field Value Type Description String settingName Declaration public string settingName Field Value Type Description String SpeechToText Declaration public AbstractSpeechToText SpeechToText Field Value Type Description AbstractSpeechToText VerticalMargin Declaration public float VerticalMargin Field Value Type Description Single Methods CheckIsSeen(Vector3) Declaration public bool CheckIsSeen(Vector3 dialogAgentPosition) Parameters Type Name Description Vector3 dialogAgentPosition Returns Type Description Boolean DeregisterDialogueCandidate(NonPlayerCharacter) Declaration public void DeregisterDialogueCandidate(NonPlayerCharacter agent) Parameters Type Name Description NonPlayerCharacter agent IsRegistered(NonPlayerCharacter) Declaration public bool IsRegistered(NonPlayerCharacter agent) Parameters Type Name Description NonPlayerCharacter agent Returns Type Description Boolean LeaveDialog() Declaration public void LeaveDialog() RegisterDialogueCandidate(NonPlayerCharacter) Declaration public void RegisterDialogueCandidate(NonPlayerCharacter agent) Parameters Type Name Description NonPlayerCharacter agent"
  },
  "api/NPCEngine.html": {
    "href": "api/NPCEngine.html",
    "title": "Namespace NPCEngine | npc-engine Unity integration",
    "keywords": "Namespace NPCEngine Classes NonPlayerCharacterEditor NPCEngineConfig Data class containing NPC Engine config. NPCEngineConfigEditor NPCEngineException ResultFuture<ReturnType> ServiceConfigDescriptor"
  },
  "api/NPCEngine.NonPlayerCharacterEditor.html": {
    "href": "api/NPCEngine.NonPlayerCharacterEditor.html",
    "title": "Class NonPlayerCharacterEditor | npc-engine Unity integration",
    "keywords": "Class NonPlayerCharacterEditor Inheritance Object NonPlayerCharacterEditor Namespace : NPCEngine Assembly : cs.temp.dll.dll Syntax public class NonPlayerCharacterEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/NPCEngine.NPCEngineConfig.html": {
    "href": "api/NPCEngine.NPCEngineConfig.html",
    "title": "Class NPCEngineConfig | npc-engine Unity integration",
    "keywords": "Class NPCEngineConfig Data class containing NPC Engine config. Inheritance Object NPCEngineConfig Namespace : NPCEngine Assembly : cs.temp.dll.dll Syntax public class NPCEngineConfig : Singleton<NPCEngineConfig> Fields connectToExistingServer Declaration public bool connectToExistingServer Field Value Type Description Boolean debugLogs Declaration public bool debugLogs Field Value Type Description Boolean modelsPath Declaration public string modelsPath Field Value Type Description String npcEnginePath Declaration public string npcEnginePath Field Value Type Description String serverAddress Declaration public string serverAddress Field Value Type Description String serverConsole Declaration public bool serverConsole Field Value Type Description Boolean serverType Declaration public ServerType serverType Field Value Type Description ServerType services Declaration public List<ServiceConfigDescriptor> services Field Value Type Description List < ServiceConfigDescriptor > Properties Port Declaration public string Port { get; } Property Value Type Description String Methods ToBeStarted(String) Declaration public bool ToBeStarted(string name) Parameters Type Name Description String name Returns Type Description Boolean"
  },
  "api/NPCEngine.NPCEngineConfigEditor.html": {
    "href": "api/NPCEngine.NPCEngineConfigEditor.html",
    "title": "Class NPCEngineConfigEditor | npc-engine Unity integration",
    "keywords": "Class NPCEngineConfigEditor Inheritance Object NPCEngineConfigEditor Namespace : NPCEngine Assembly : cs.temp.dll.dll Syntax public class NPCEngineConfigEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/NPCEngine.NPCEngineException.html": {
    "href": "api/NPCEngine.NPCEngineException.html",
    "title": "Class NPCEngineException | npc-engine Unity integration",
    "keywords": "Class NPCEngineException Inheritance Object Exception NPCEngineException Namespace : NPCEngine Assembly : cs.temp.dll.dll Syntax public class NPCEngineException : Exception, ISerializable, _Exception Constructors NPCEngineException() Declaration public NPCEngineException() NPCEngineException(SerializationInfo, StreamingContext) Declaration protected NPCEngineException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context NPCEngineException(String) Declaration public NPCEngineException(string message) Parameters Type Name Description String message NPCEngineException(String, Exception) Declaration public NPCEngineException(string message, Exception inner) Parameters Type Name Description String message Exception inner"
  },
  "api/NPCEngine.ResultFuture-1.html": {
    "href": "api/NPCEngine.ResultFuture-1.html",
    "title": "Class ResultFuture<ReturnType> | npc-engine Unity integration",
    "keywords": "Class ResultFuture<ReturnType> Inheritance Object ResultFuture<ReturnType> Namespace : NPCEngine Assembly : cs.temp.dll.dll Syntax public class ResultFuture<ReturnType> Type Parameters Name Description ReturnType Properties Error Declaration public NPCEngineException Error { get; } Property Value Type Description NPCEngineException Result Declaration public ReturnType Result { get; } Property Value Type Description ReturnType ResultReady Declaration public bool ResultReady { get; } Property Value Type Description Boolean Methods ErrorCallback(NPCEngineException) Declaration public void ErrorCallback(NPCEngineException error) Parameters Type Name Description NPCEngineException error ResultFinishedCallback(ReturnType) Declaration public void ResultFinishedCallback(ReturnType result) Parameters Type Name Description ReturnType result"
  },
  "api/NPCEngine.RPC.APICommunicatorHTTPImpl.html": {
    "href": "api/NPCEngine.RPC.APICommunicatorHTTPImpl.html",
    "title": "Class APICommunicatorHTTPImpl | npc-engine Unity integration",
    "keywords": "Class APICommunicatorHTTPImpl Inheritance Object RequestDispatcherImpl APICommunicatorHTTPImpl Inherited Members RequestDispatcherImpl.id RequestDispatcherImpl.address Namespace : NPCEngine.RPC Assembly : cs.temp.dll.dll Syntax public class APICommunicatorHTTPImpl : RequestDispatcherImpl Constructors APICommunicatorHTTPImpl(String, String) Declaration public APICommunicatorHTTPImpl(string address, string id) Parameters Type Name Description String address String id Methods DispatchRequestsCoroutine(Queue<Request>) Declaration public override IEnumerator DispatchRequestsCoroutine(Queue<Request> taskQueue) Parameters Type Name Description Queue < Request > taskQueue Returns Type Description IEnumerator Overrides RequestDispatcherImpl.DispatchRequestsCoroutine(Queue<Request>)"
  },
  "api/NPCEngine.RPC.APICommunicatorZMQImpl.html": {
    "href": "api/NPCEngine.RPC.APICommunicatorZMQImpl.html",
    "title": "Class APICommunicatorZMQImpl | npc-engine Unity integration",
    "keywords": "Class APICommunicatorZMQImpl Inheritance Object RequestDispatcherImpl APICommunicatorZMQImpl Inherited Members RequestDispatcherImpl.id RequestDispatcherImpl.address Namespace : NPCEngine.RPC Assembly : cs.temp.dll.dll Syntax public class APICommunicatorZMQImpl : RequestDispatcherImpl Constructors APICommunicatorZMQImpl(String, String) Declaration public APICommunicatorZMQImpl(string address, string id) Parameters Type Name Description String address String id Methods DispatchRequestsCoroutine(Queue<Request>) Declaration public override IEnumerator DispatchRequestsCoroutine(Queue<Request> taskQueue) Parameters Type Name Description Queue < Request > taskQueue Returns Type Description IEnumerator Overrides RequestDispatcherImpl.DispatchRequestsCoroutine(Queue<Request>) Finalize() Declaration protected void Finalize()"
  },
  "api/NPCEngine.RPC.html": {
    "href": "api/NPCEngine.RPC.html",
    "title": "Namespace NPCEngine.RPC | npc-engine Unity integration",
    "keywords": "Namespace NPCEngine.RPC Classes APICommunicatorHTTPImpl APICommunicatorZMQImpl Request RequestDispatcherImpl RPCBase RPCRequestMessage<ParametersType> RPCResponseError RPCResponseMessage<ReturnType> Enums ServerType"
  },
  "api/NPCEngine.RPC.Request.html": {
    "href": "api/NPCEngine.RPC.Request.html",
    "title": "Class Request | npc-engine Unity integration",
    "keywords": "Class Request Inheritance Object Request Namespace : NPCEngine.RPC Assembly : cs.temp.dll.dll Syntax public class Request : Tuple<string, Action<string>> Constructors Request(String, Action<String>) Declaration public Request(string key, Action<string> action) Parameters Type Name Description String key Action < String > action"
  },
  "api/NPCEngine.RPC.RequestDispatcherImpl.html": {
    "href": "api/NPCEngine.RPC.RequestDispatcherImpl.html",
    "title": "Class RequestDispatcherImpl | npc-engine Unity integration",
    "keywords": "Class RequestDispatcherImpl Inheritance Object RequestDispatcherImpl APICommunicatorHTTPImpl APICommunicatorZMQImpl Namespace : NPCEngine.RPC Assembly : cs.temp.dll.dll Syntax public abstract class RequestDispatcherImpl Constructors RequestDispatcherImpl(String, String) Declaration public RequestDispatcherImpl(string address, string id) Parameters Type Name Description String address String id Fields address Declaration protected string address Field Value Type Description String id Declaration protected string id Field Value Type Description String Methods DispatchRequestsCoroutine(Queue<Request>) Declaration public abstract IEnumerator DispatchRequestsCoroutine(Queue<Request> taskQueue) Parameters Type Name Description Queue < Request > taskQueue Returns Type Description IEnumerator"
  },
  "api/NPCEngine.RPC.RPCBase.html": {
    "href": "api/NPCEngine.RPC.RPCBase.html",
    "title": "Class RPCBase | npc-engine Unity integration",
    "keywords": "Class RPCBase Inheritance Object RPCBase Namespace : NPCEngine.RPC Assembly : cs.temp.dll.dll Syntax public abstract class RPCBase : MonoBehaviour Fields serviceId Declaration public string serviceId Field Value Type Description String Methods Run<P, R>(String, P) Declaration public ResultFuture<R> Run<P, R>(String methodName, P parameters) where P : new() Parameters Type Name Description String methodName P parameters Returns Type Description ResultFuture <R> Type Parameters Name Description P R"
  },
  "api/NPCEngine.RPC.RPCRequestMessage-1.html": {
    "href": "api/NPCEngine.RPC.RPCRequestMessage-1.html",
    "title": "Class RPCRequestMessage<ParametersType> | npc-engine Unity integration",
    "keywords": "Class RPCRequestMessage<ParametersType> Inheritance Object RPCRequestMessage<ParametersType> Namespace : NPCEngine.RPC Assembly : cs.temp.dll.dll Syntax public class RPCRequestMessage<ParametersType> where ParametersType : new() Type Parameters Name Description ParametersType Constructors RPCRequestMessage() Declaration public RPCRequestMessage() Fields id Declaration public int id Field Value Type Description Int32 jsonrpc Declaration public String jsonrpc Field Value Type Description String method Declaration public String method Field Value Type Description String parameters Declaration public ParametersType parameters Field Value Type Description ParametersType"
  },
  "api/NPCEngine.RPC.RPCResponseError.html": {
    "href": "api/NPCEngine.RPC.RPCResponseError.html",
    "title": "Class RPCResponseError | npc-engine Unity integration",
    "keywords": "Class RPCResponseError Inheritance Object RPCResponseError Namespace : NPCEngine.RPC Assembly : cs.temp.dll.dll Syntax public class RPCResponseError Fields code Declaration public int code Field Value Type Description Int32 message Declaration public String message Field Value Type Description String"
  },
  "api/NPCEngine.RPC.RPCResponseMessage-1.html": {
    "href": "api/NPCEngine.RPC.RPCResponseMessage-1.html",
    "title": "Class RPCResponseMessage<ReturnType> | npc-engine Unity integration",
    "keywords": "Class RPCResponseMessage<ReturnType> Inheritance Object RPCResponseMessage<ReturnType> Namespace : NPCEngine.RPC Assembly : cs.temp.dll.dll Syntax public class RPCResponseMessage<ReturnType> Type Parameters Name Description ReturnType Constructors RPCResponseMessage() Declaration public RPCResponseMessage() Fields error Declaration public RPCResponseError error Field Value Type Description RPCResponseError id Declaration public int id Field Value Type Description Int32 jsonrpc Declaration public String jsonrpc Field Value Type Description String result Declaration public ReturnType result Field Value Type Description ReturnType"
  },
  "api/NPCEngine.RPC.ServerType.html": {
    "href": "api/NPCEngine.RPC.ServerType.html",
    "title": "Enum ServerType | npc-engine Unity integration",
    "keywords": "Enum ServerType Namespace : NPCEngine.RPC Assembly : cs.temp.dll.dll Syntax public enum ServerType Fields Name Description HTTP ZMQ"
  },
  "api/NPCEngine.ServiceConfigDescriptor.html": {
    "href": "api/NPCEngine.ServiceConfigDescriptor.html",
    "title": "Class ServiceConfigDescriptor | npc-engine Unity integration",
    "keywords": "Class ServiceConfigDescriptor Inheritance Object ServiceConfigDescriptor Namespace : NPCEngine Assembly : cs.temp.dll.dll Syntax public class ServiceConfigDescriptor Fields name Declaration public string name Field Value Type Description String path Declaration public string path Field Value Type Description String start Declaration public bool start Field Value Type Description Boolean type Declaration public string type Field Value Type Description String"
  },
  "api/NPCEngine.Utility.AudioSourceQueue.html": {
    "href": "api/NPCEngine.Utility.AudioSourceQueue.html",
    "title": "Class AudioSourceQueue | npc-engine Unity integration",
    "keywords": "Class AudioSourceQueue Inheritance Object AudioSourceQueue Namespace : NPCEngine.Utility Assembly : cs.temp.dll.dll Syntax public class AudioSourceQueue : MonoBehaviour Fields audioSource Declaration public AudioSource audioSource Field Value Type Description AudioSource Methods PlaySound(AudioClip) Declaration public void PlaySound(AudioClip clip) Parameters Type Name Description AudioClip clip"
  },
  "api/NPCEngine.Utility.CoroutineUtility.html": {
    "href": "api/NPCEngine.Utility.CoroutineUtility.html",
    "title": "Class CoroutineUtility | npc-engine Unity integration",
    "keywords": "Class CoroutineUtility Inheritance Object Singleton < CoroutineUtility > CoroutineUtility Inherited Members Singleton<CoroutineUtility>.Instance Singleton<CoroutineUtility>.GetInstance() Namespace : NPCEngine.Utility Assembly : cs.temp.dll.dll Syntax public class CoroutineUtility : Singleton<CoroutineUtility> Methods GetGameObjectPath(MonoBehaviour) Declaration public static string GetGameObjectPath(MonoBehaviour behaviour) Parameters Type Name Description MonoBehaviour behaviour Returns Type Description String IsRunning(MonoBehaviour, String) Declaration public static bool IsRunning(MonoBehaviour owner, string name) Parameters Type Name Description MonoBehaviour owner String name Returns Type Description Boolean StartCoroutine(IEnumerator, MonoBehaviour, String) Declaration public static void StartCoroutine(IEnumerator routine, MonoBehaviour owner, string id) Parameters Type Name Description IEnumerator routine MonoBehaviour owner String id StopAllEditorCoroutines() Declaration public static void StopAllEditorCoroutines() StopAllEditorCoroutines(MonoBehaviour) Declaration public static void StopAllEditorCoroutines(MonoBehaviour owner) Parameters Type Name Description MonoBehaviour owner StopAllPlayingCoroutines(MonoBehaviour) Declaration public static void StopAllPlayingCoroutines(MonoBehaviour owner) Parameters Type Name Description MonoBehaviour owner StopCoroutine(String, MonoBehaviour) Declaration public static void StopCoroutine(string id, MonoBehaviour owner) Parameters Type Name Description String id MonoBehaviour owner WaitForSeconds(Single) Declaration public static IEnumerator WaitForSeconds(float seconds) Parameters Type Name Description Single seconds Returns Type Description IEnumerator"
  },
  "api/NPCEngine.Utility.html": {
    "href": "api/NPCEngine.Utility.html",
    "title": "Namespace NPCEngine.Utility | npc-engine Unity integration",
    "keywords": "Namespace NPCEngine.Utility Classes AudioSourceQueue CoroutineUtility Singleton<T>"
  },
  "api/NPCEngine.Utility.Singleton-1.html": {
    "href": "api/NPCEngine.Utility.Singleton-1.html",
    "title": "Class Singleton<T> | npc-engine Unity integration",
    "keywords": "Class Singleton<T> Inheritance Object Singleton<T> CoroutineUtility Namespace : NPCEngine.Utility Assembly : cs.temp.dll.dll Syntax public class Singleton<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Properties Instance Declaration public static T Instance { get; } Property Value Type Description T Methods GetInstance() Declaration public static T GetInstance() Returns Type Description T"
  },
  "index.html": {
    "href": "index.html",
    "title": "npc-engine Unity integration | npc-engine Unity integration",
    "keywords": "npc-engine Unity integration This is Unity integration package for NPC-Engine. NPC-Engine is a deep learning inference engine for designing NPC AI with natural language. Features Chat-bot dialogue system. SoTA tools like text semantic similarity and text to speech. Easy, open source deep learning model standard (ONNX with YAML configs). GPU accelerated inference with onnxruntime. Getting started Download and import Integration package Install dependencies Follow welcome window instructions or do a manual setup . See tutorials and API docs . Tutorials Basic Demo tutorial to see the basic usage of the NPC-engine API Advanced Demo to understand how higher-level components work and how to integrate NPC Engine into your game. Scene Setup Tutorial to learn how to setup your scene from the ground up. Dependencies Advanced demo scene requires these free asset store packages: VIDE dialogues Modular First Person Controller Low Poly Modular Armours RPG Poly Pack - Lite Manual setup This integration package is just a wrapper around python server that actually does the heavy lifting. These steps are usually done automatically by the welcome dialogue buttons from the unity editor, but they can be done manually if required: Download the latest release of npc-engine Unzip it into the Assets/StreamingAssets/.npc-engine folder of your Unity project. Create an empty Assets/StreamingAssets/.models folder Run cmd command from your project folder to download default models: Assets/StreamingAssets/.npc-engine/cli.exe download-default-models --models-path Assets/StreamingAssets/.models"
  },
  "tutorials/advanced_demo.html": {
    "href": "tutorials/advanced_demo.html",
    "title": "Overview | npc-engine Unity integration",
    "keywords": "This tutorial shows how to use NPC Engine higher level components as well as how to integrate them into the classic NPC design. Overview Dependencies This scene depends on a these free packages: Modular First Person Controller is a player controller we are using. You can replace it with your own player controller including VR rigs. Custom Player Rig section explains how to do it. VIDE dialogues is a free dialogue tree implementation. This scene has an example integration for this dialogue system. Low Poly Modular Armours is used for character models. RPG Poly Pack - Lite is used for the scene itself. Scene This scene is located in NPCEngine/Demo/AdvancedDemo folder. It contains 7 different characters with their own personas and names. Two of them have their own dialogue trees, two share the same dialogue tree and three do not have any dialogue trees assigned. Its a good example of how to use NPC Engine to fill the scene with NPCs. To start the dialogue approach the character and start talking into your microphone. !!! note \"If you are using DictationRecognizerTTS (default option).\" Dictation recognizer is currently functional only on Windows 10, and requires that dictation is permitted in the user's Speech privacy policy (Settings->Privacy->Speech, inking & typing). If dictation is not enabled, DictationRecognizerTTS will fail on Start. Developers can handle this failure in an app-specific way by providing a OnSpeechRecognitionFailed delegate. Components Player Character To integrate player controller into NPC Engine, you need to add two components to your player controller: NPCEngine.Components.PlayerCharacter : This is the main component that is responsible for the player's location, persona and ability to initiate dialogue. It should be attached to the gameobject that has player tagged collider so that ColliderLocationTrigger script works correctly. You should assign your player's camera to the CheckCamera field, It's used to check if player is looking at the NPC before initiating dialogue. You should also enter name and a persona of your player character. MaxRange is the minimum distance from the player to the NPC at which dialogue can be happening (dialogue is terminated if player is farther than this). Vertical/HorizontalMargin controls how centered should NPC be in the camera to initiate dialogue. Setting(Location) name and description are set by ColliderLocationTrigger script when player enters the location trigger. NPCEngine.Components.AbstractSpeechToText : This is the component that is responsible for the speech recognition. There are two implementations of this component available and they are discussed in the next section. By default, it's best to use NPCEngine.Components.DictatinRecognizerSTT which uses UnityEngine.Windows.Speech.DictationRecognizer and provides the best quality. Here is the player character attached to the scene's player controller as an example: Speech Recognition There are two implementations of speech recognition available: NPCEngine.Components.DictatinRecognizerSTT It uses UnityEngine.Windows.Speech.DictationRecognizer . It's downside are: It requires additional permissions to be enabled in the user's privacy settings. It has relatively high latency. It doesn't work when application is not in focus. It's hard to diagnose if something goes wrong. (e.g. speech is not recognized) But it does provide the best quality of recognition. NPCEngine.Components.NPCEngineSTT It uses NPCEngine's own speech recognition engine. It does not require additional permissions and has low latency, but it's work in progress and the quality is much worse than NPCEngine.Components.DictatinRecognizerSTT . It requires speech to be very clear and understandable as well as low noise environment. It also can be quite confusing for the chatbots when it does not recognize speech properly. Advanced demo scene uses DictatinRecognizerSTT by default, but you can try NPCEngineSTT just by replacing components in FirstPersonController gameobject. CollisionLocationTrigger If your game has a lot of locations, you can use this component to make it easier to assign location names and descriptions to your player character. Just place a trigger collider to cover the location and add this component to it. Otherwise you could just provide default location name and description in the PlayerCharacter component. Non-Player Character To integrate NPC into NPC Engine, you need to: Implement NPCEngine.Components.AbstractDialogueSystem . It's already done for VIDE dialogue system in the demo scene in NPCEngine/Demo/AdvancedDemo/Scripts folder. Refer to VIDE Asset Store page for more details about this dialogue system. Add NPCEngine.Components.AbstractDialogueSystem and NPCEngine.Components.NonPlayerCharacter component to your NPC. NPCEngine.Components.NonPlayerCharacter This component uses speech recognized by PlayerCharacter to navigate dialogue trees, generate replies and emit dialogue related events. The high level flow of the dialogue is as follows: First, the type of the node is checked, if it's an NPC node, then the speech is generated and OnDialogueLine event is emitted. It repeats this process until a player node is found. When a player node is found, component signals PlayerCharacter to recognize more speech. When speech is recognized, OnDialogueLine event is emitted again for the player line, topics are requested from the dialogue system and OnTopicHintsUpdate is emitted. Player line is matched via semantic similarity to the player options in the dialogue tree. If the player line is matched to one of the options it is selected in the dialogue tree and AbstractDialogueSystem.Next() is called, otherwise reply is generated by the ChatbotAPI. All the steps are repeated until the dialogue is finished. So as you can see you design your dialogue tree in the same way as you would without NPC Engine and everything else will be handled by the chatbot neural net. The most important fields of this component should sound familiar for you if you've tried BasicDemo scene already. Here is the short description of those: characterName and persona These are the name and persona of the NPC used to generate lines via chatbot neural network. topK and temperature These are sampling parameters for the chatbot neural network. It was finetuned for the temperature == 1.0, so it's best to keep it that way. Randomness of the output can be controlled via topK parameter. defaultThreshold This is the default semantic similarity threshold that triggers dialogue options. You can also specify it in the dialogue system. In case of VIDE it can be added as extraVars to the dialogue node. voiceId and nChunksTextGeneration These are the parameters for TextToSpeech generation. VoiceId is the voice used to generate the text. nChunksTextGeneration is the number of chunks in which speech will be generated. In short, nChunksTextGeneration is a tradeof between quality and latency where 1 is the best quality and the most latency. Recommended range is [1, 10]. audioSourceQueue It's a reference to the script that handles audio playback from the iterative speech generation. dialogueSystem It's a reference to the implementation of the AbstractDialogueSystem that is used to generate dialogue. Events They are pretty self-explanatory and are useful for all the presentation functionality (e.g. dialogue UI and animations). VIDEDialogueSystem This is the implementation of the AbstractDialogueSystem for the VIDE dialogues. Only a few things are different from the default usage of VIDE: You can specify topics in the line string by using square brackets in the beginning of the line (e.g. [Tavern] Where is the tavern? ). OnTopicHintsUpdate event receives only unique topics as an argument so you can specify same topic for multiple lines If no topic is specified then the line is taken as a topic. You can set topic to empty via empty brackets. e.g. You can specify threshold for the node via Extra Variable with the name threshold . e.g. Dialogue Design Considerations You can check scene's existing dialogues for examples of how to design dialogues. Here are a few tips: Use multiple lines for each options to cover semantically distinct answers that in the context of the dialogue lead to similar results. !!! note \"Example\" In context of accepting to help someone do something there are a few options that are not semantically similar: - `I will help you` - `I will do something` - `I'll figure something out` Would all mean the same thing in the context of the dialogue, but in isolation mean different things. Best way to design dialogues for NPC Engine is to continually playtest them and find missing options that should be there as well as tune the thresholds to exclude anything unrelated. Start the dialogue via NPC node and use it to set the topic and the mood of the dialogue. It is the most reliable method to control what chatbot will generate. !!! note \"Example\" If the character is angry, then it's best to start the dialogue with NPC expressing this anger via cursing or complaining about the object of his anger. If the character's village is attacked by goblins, then it's best to start the dialogue with a line that describes the situation and communicates distress."
  },
  "tutorials/basic_demo.html": {
    "href": "tutorials/basic_demo.html",
    "title": "Scene Overview | npc-engine Unity integration",
    "keywords": "This tutorial explains raw usage of the NPC Engine API from Unity using Basic Demo scene. Scene Overview First lets go through and play around with the basic demo scene. Its located under this path: NPCEngine/Demo/BasicDemo/Basic.unity When you start it the first thing you'll see is this screen: Since NPC Engine is a server that starts alongside unity and it's startup takes some time you can keep it running between playtests and just connect to existing one. No server is running so you should start a new one. When started you should see some Unity logs regarding connecting to the server as well as server console pop up with server logs. This behaviour is debug only and can be turned off by disabling debug flag in NPCEngineManager game object. If NPC Engine starts successfully, menu options will become interactable and you will be able to play around with different APIs. Available API Demos Text To Speech Demo This demo shows you the API that allows you to generate speech from text with multiple voices. Fantasy Chatbot Demo This demo shows you the chatbot API. It enables you to describe a fantasy character via the chatbot context and chat with your character. Right now it's available only in the single style (Fantasy) but we are already working on the other chatbot neural networks with diffirent styles as well as tutorials how to train them yourself. This demo greets you with a context in which you can fill in different descriptions to simulate different situations. Chat button will take you to chat window where you can talk to the character defined in the context. Clear history button will restart the dialogue. Semantic Similarity Demo This demo shows the API to compare two sentences via their meaning. When you press Compute Similarity the score is shown in range of [-1,1] Where -1 means that phrases are completely unrelated and 1 is that phrases are the same. Usually the most meaningful scores are in the range [0,1] Speech To Text Demo This demo shows you the API that allows you to listen to microphone input and transcribe it to text. Just press Listen button and say something into the microphone. Note that it will only work in low noise environment and with slow articulate speech. !!! note \"Experimental API\" This API is very WIP and experimental so it's performance is not yet ready for any production usage, you should use UnityEngine.Windows.Speech.DictationRecognizer instead Server Lifetime The main script that manages NPC Engine server is NPCEngine.Server.NPCEngineServer . It is attached to NPCEngineManager game object in the scene. There you can find these public fields: Initialize On Start controls whether NPCEngineServer will run StartInferenceEngine and ConnectToServer methods in it's Awake method. For the basic demo it's turned off to allow you to start and connect to server manually via UI buttons. Debug flag when turned on, starts server in a CMD window as well as enables NPCEngineServer to write message logs to console. When it's off, server runs in the background with no logs produced. Connect To Existing Server controls whether NPCEngineServer should start the server in StartInferenceEngine method and take ownership of the process (check it's health and terminate it OnDestroy ). You can use this flag to not wait for NPCEngine to be initialized each playtest and keep connecting to the one that is already started."
  },
  "tutorials/scene_setup.html": {
    "href": "tutorials/scene_setup.html",
    "title": "Server setup | npc-engine Unity integration",
    "keywords": "This tutorial will walk you through setting up a scene from zero. Server setup First, you have to make sure that npc-engine server is downloaded into the Assets/StreamingAssets/.npc-engine folder of your Unity project. You should also have atleast one model in the Assets/StreamingAssets/.models folder. This is usually done by the welcome dialogue buttons from the unity editor, but you can do it manually if required (see Getting started ). It's best to test that everything is setup correctly in the basic demo scene first. Dependencies One of the main dependency is some sort of a dialogue tree system. To integrate any dialogue system with npc-engine you must implement AbstractDialogueSystem interface. We already provide integration with a free dialogue tree system called VIDE Dialogues and we are going to use it in this tutorial. NPCEngineServer (NPCEngineManager prefab) NPCEngineServer is a singleton component that manages the npc-engine server lifetime and communication, it is required in every scene that uses npc-engine. It has a few useful properties that you can use to control how server is started, please refer to the API for more details. It's missing on the screenshots but please add it anyway :) Bellow is the screenshot how final scene hierarchy should look Character setup In this section we will walk you through setting up a character in the scene. First let's add a character to the scene, we'll call him cube . The main npc-engine component for NPCs is NonPlayerCharacter , but if you will try adding it to the cube you will get an error that it requires AbstractDialogueSystem component that is abstract and cannot be instantiated. Lets first add VIDEDialogueSystem component to the cube. It will also create VIDE_Assign component that will assign the cube to the dialogue tree. Please refer to VIDE documentation for more details. After that you can add NonPlayerCharacter component to the cube. Now, let's give our character a name, description and pick him a voice. Lets also add a dialogue tree for our character, NonPlayerCharacter will trigger speech recognition only if there is a players choice node active, otherwise player's speech will only trigger NPC speech generation with given static lines from the NPC dialogue nodes. Lets just choose a random dialogue tree from the list of available ones. We also should create an AudioSourceQueue component and add it to the NonPlayerCharacter. This is the basics of setting up a non-player character in the scene without the UI except the generated audio. We will go over the UI in the NonPlayerCharacter Callbacks for UI section. You can read about all the other NonPlayerCharacter parameters in the API docs . Player Character Now it's time to set up the player character. Since there is no need for the player controller in this tutorial, we will just use a static Camera object. First, let's add a PlayerCharacter component to the camera object. Except the familiar character name and persona parameters you might have noticed, there are a two more natural language parameters that you need to set: setting name and description. These describe the location of the character in the world for chatbot to use in the dialogue with the player. The reason it is not present in the NonPlayerCharacter component is that it is not a part of the NPC's state, but rather a property of the dialogue, so it is provided by the player character. They are static in this tutorial, but they can be changed dynamically through scripts (e.g. as an event of collider trigger.) The next important parameter is the SpeechToText component, it is used to convert speech from the microphone to text. We recommend using DictationRecognizerSTT component for this purpose, but it requires a change to windows settings (Dictation permision in speech privacy settings in Settings->Privacy->Speech, inking & typing), please refer to the documentation for details At this point you should be able to talk to your character by saying something in the microphone. It's time to test it ! Make sure that our Cube NPC audio source is centered in the camera (It is checked to start a dialogue) and that it's closer than MaxRange parameter in Player Character component. On start you should see console pop up if your NPCEngineServer has Debug flag enabled. This is the console of the npc-engine server. It contains a lot of useful information about the server messaging and what models are loaded. If the console shows errors please check Troubleshooting section or create a github issue . Before you say anything you should click on unity Game window so that it enters focus and make sure that the microphone is enabled. Focus is required by Windows STT services. After npc-engine intialization (Can be checked by NPCEngineServer.Instance.initialized flag), when you say something into your microphone you should see hypothesis and result logs in Unity console, as well as server logs showing messaging between npc-engine server and Unity. You should also hear Cube's replies to your speech. Here is how it should look like after start STT Restart errors will appear every time you change focus from the game window as STT fails at that point and is restarted when you focus on the game window again. Troubleshooting TODO :) (post issues on github) NonPlayerCharacter Callbacks for UI This section will explain how to setup UI for the NonPlayerCharacter. The main idea is that NonPlayerCharacter updates any of your UI scripts via callbacks. You can also access dialogue history via the history parameter. Here are the callbacks available: We are mostly interested in: OnDialogueStart callback. It is triggered when the dialogue starts and usually should enable the UI object. OnDialogueEnd callback. Opposite of the dialogue start. OnDialogueLine callback. It is triggered when the dialogue history is updated. It contains the current line struct with text and name of the character as well as a boolean flag that becomes true when the line is scripted in the dialogue tree (false if it was generated). OnTopicHintsUpdate callback. Topic hints are the short phrases that describe dialogue options that player has. They can be shown to the player instead of actual phrases. Please see Dialogue design section of advanced demo for more details. You could write your own scripts but we will use already existing simple UI prefab we provide under NPCEngine/Demo/AdvancedDemo/Prefabs/DialogueUI.asset . Here is the example simple setup of the UI: And here is the final result:"
  }
}