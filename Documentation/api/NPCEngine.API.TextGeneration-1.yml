### YamlMime:ManagedReference
items:
- uid: NPCEngine.API.TextGeneration`1
  commentId: T:NPCEngine.API.TextGeneration`1
  id: TextGeneration`1
  parent: NPCEngine.API
  children:
  - NPCEngine.API.TextGeneration`1.GenerateReply(`0,System.Single,System.Int32,System.Int32,Action{System.String},Action{NPCEngine.NPCEngineException})
  - NPCEngine.API.TextGeneration`1.GetPromptTemplate(Action{System.String},Action{NPCEngine.NPCEngineException})
  - NPCEngine.API.TextGeneration`1.GetSpecialTokens(Action{System.Collections.Generic.Dictionary{System.String,System.String}},Action{NPCEngine.NPCEngineException})
  langs:
  - csharp
  - vb
  name: TextGeneration<ContextType>
  nameWithType: TextGeneration<ContextType>
  fullName: NPCEngine.API.TextGeneration<ContextType>
  type: Class
  source:
    id: TextGeneration
    path: ''
    startLine: 1099
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  summary: "\n<code>Chatbot</code> provides remote procedure calls \nto inference engine&apos;s TextGeneration services.\n"
  example: []
  syntax:
    content: 'public class TextGeneration<ContextType> : RPCBase where ContextType : new()'
    typeParameters:
    - id: ContextType
    content.vb: >-
      Public Class TextGeneration(Of ContextType As New)

          Inherits RPCBase
  inheritance:
  - System.Object
  nameWithType.vb: TextGeneration(Of ContextType)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NPCEngine.API.TextGeneration(Of ContextType)
  name.vb: TextGeneration(Of ContextType)
- uid: NPCEngine.API.TextGeneration`1.GenerateReply(`0,System.Single,System.Int32,System.Int32,Action{System.String},Action{NPCEngine.NPCEngineException})
  commentId: M:NPCEngine.API.TextGeneration`1.GenerateReply(`0,System.Single,System.Int32,System.Int32,Action{System.String},Action{NPCEngine.NPCEngineException})
  id: GenerateReply(`0,System.Single,System.Int32,System.Int32,Action{System.String},Action{NPCEngine.NPCEngineException})
  parent: NPCEngine.API.TextGeneration`1
  langs:
  - csharp
  - vb
  name: GenerateReply(ContextType, Single, Int32, Int32, Action<String>, Action<NPCEngineException>)
  nameWithType: TextGeneration<ContextType>.GenerateReply(ContextType, Single, Int32, Int32, Action<String>, Action<NPCEngineException>)
  fullName: NPCEngine.API.TextGeneration<ContextType>.GenerateReply(ContextType, System.Single, System.Int32, System.Int32, Action<System.String>, Action<NPCEngine.NPCEngineException>)
  type: Method
  source:
    id: GenerateReply
    path: ''
    startLine: 1122
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  syntax:
    content: public IEnumerator GenerateReply(ContextType context, float temperature = 0.8F, int topk = 5, int numSampled = 3, Action<string> outputCallback = null, Action<NPCEngineException> errorCallback = null)
    parameters:
    - id: context
      type: '{ContextType}'
    - id: temperature
      type: System.Single
    - id: topk
      type: System.Int32
    - id: numSampled
      type: System.Int32
    - id: outputCallback
      type: Global.Action{System.String}
    - id: errorCallback
      type: Global.Action{NPCEngine.NPCEngineException}
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function GenerateReply(context As ContextType, temperature As Single = 0.8F, topk As Integer = 5, numSampled As Integer = 3, outputCallback As Action(Of String) = Nothing, errorCallback As Action(Of NPCEngineException) = Nothing) As IEnumerator
  overload: NPCEngine.API.TextGeneration`1.GenerateReply*
  nameWithType.vb: TextGeneration(Of ContextType).GenerateReply(ContextType, Single, Int32, Int32, Action(Of String), Action(Of NPCEngineException))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NPCEngine.API.TextGeneration(Of ContextType).GenerateReply(ContextType, System.Single, System.Int32, System.Int32, Action(Of System.String), Action(Of NPCEngine.NPCEngineException))
  name.vb: GenerateReply(ContextType, Single, Int32, Int32, Action(Of String), Action(Of NPCEngineException))
- uid: NPCEngine.API.TextGeneration`1.GetSpecialTokens(Action{System.Collections.Generic.Dictionary{System.String,System.String}},Action{NPCEngine.NPCEngineException})
  commentId: M:NPCEngine.API.TextGeneration`1.GetSpecialTokens(Action{System.Collections.Generic.Dictionary{System.String,System.String}},Action{NPCEngine.NPCEngineException})
  id: GetSpecialTokens(Action{System.Collections.Generic.Dictionary{System.String,System.String}},Action{NPCEngine.NPCEngineException})
  parent: NPCEngine.API.TextGeneration`1
  langs:
  - csharp
  - vb
  name: GetSpecialTokens(Action<Dictionary<String, String>>, Action<NPCEngineException>)
  nameWithType: TextGeneration<ContextType>.GetSpecialTokens(Action<Dictionary<String, String>>, Action<NPCEngineException>)
  fullName: NPCEngine.API.TextGeneration<ContextType>.GetSpecialTokens(Action<System.Collections.Generic.Dictionary<System.String, System.String>>, Action<NPCEngine.NPCEngineException>)
  type: Method
  source:
    id: GetSpecialTokens
    path: ''
    startLine: 1142
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  syntax:
    content: public IEnumerator GetSpecialTokens(Action<Dictionary<string, string>> outputCallback = null, Action<NPCEngineException> errorCallback = null)
    parameters:
    - id: outputCallback
      type: Global.Action{System.Collections.Generic.Dictionary{System.String,System.String}}
    - id: errorCallback
      type: Global.Action{NPCEngine.NPCEngineException}
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function GetSpecialTokens(outputCallback As Action(Of Dictionary(Of String, String)) = Nothing, errorCallback As Action(Of NPCEngineException) = Nothing) As IEnumerator
  overload: NPCEngine.API.TextGeneration`1.GetSpecialTokens*
  nameWithType.vb: TextGeneration(Of ContextType).GetSpecialTokens(Action(Of Dictionary(Of String, String)), Action(Of NPCEngineException))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NPCEngine.API.TextGeneration(Of ContextType).GetSpecialTokens(Action(Of System.Collections.Generic.Dictionary(Of System.String, System.String)), Action(Of NPCEngine.NPCEngineException))
  name.vb: GetSpecialTokens(Action(Of Dictionary(Of String, String)), Action(Of NPCEngineException))
- uid: NPCEngine.API.TextGeneration`1.GetPromptTemplate(Action{System.String},Action{NPCEngine.NPCEngineException})
  commentId: M:NPCEngine.API.TextGeneration`1.GetPromptTemplate(Action{System.String},Action{NPCEngine.NPCEngineException})
  id: GetPromptTemplate(Action{System.String},Action{NPCEngine.NPCEngineException})
  parent: NPCEngine.API.TextGeneration`1
  langs:
  - csharp
  - vb
  name: GetPromptTemplate(Action<String>, Action<NPCEngineException>)
  nameWithType: TextGeneration<ContextType>.GetPromptTemplate(Action<String>, Action<NPCEngineException>)
  fullName: NPCEngine.API.TextGeneration<ContextType>.GetPromptTemplate(Action<System.String>, Action<NPCEngine.NPCEngineException>)
  type: Method
  source:
    id: GetPromptTemplate
    path: ''
    startLine: 1148
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  syntax:
    content: public IEnumerator GetPromptTemplate(Action<string> outputCallback = null, Action<NPCEngineException> errorCallback = null)
    parameters:
    - id: outputCallback
      type: Global.Action{System.String}
    - id: errorCallback
      type: Global.Action{NPCEngine.NPCEngineException}
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function GetPromptTemplate(outputCallback As Action(Of String) = Nothing, errorCallback As Action(Of NPCEngineException) = Nothing) As IEnumerator
  overload: NPCEngine.API.TextGeneration`1.GetPromptTemplate*
  nameWithType.vb: TextGeneration(Of ContextType).GetPromptTemplate(Action(Of String), Action(Of NPCEngineException))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NPCEngine.API.TextGeneration(Of ContextType).GetPromptTemplate(Action(Of System.String), Action(Of NPCEngine.NPCEngineException))
  name.vb: GetPromptTemplate(Action(Of String), Action(Of NPCEngineException))
references:
- uid: NPCEngine.API
  commentId: N:NPCEngine.API
  name: NPCEngine.API
  nameWithType: NPCEngine.API
  fullName: NPCEngine.API
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NPCEngine.API.TextGeneration`1.GenerateReply*
  commentId: Overload:NPCEngine.API.TextGeneration`1.GenerateReply
  name: GenerateReply
  nameWithType: TextGeneration<ContextType>.GenerateReply
  fullName: NPCEngine.API.TextGeneration<ContextType>.GenerateReply
  nameWithType.vb: TextGeneration(Of ContextType).GenerateReply
  fullName.vb: NPCEngine.API.TextGeneration(Of ContextType).GenerateReply
- uid: '{ContextType}'
  commentId: '!:ContextType'
  definition: ContextType
  name: ContextType
  nameWithType: ContextType
  fullName: ContextType
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Global.Action{System.String}
  commentId: '!:Global.Action{System.String}'
  definition: Global.Action`1
  name: Action<String>
  nameWithType: Action<String>
  fullName: Action<System.String>
  nameWithType.vb: Action(Of String)
  fullName.vb: Action(Of System.String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Action{NPCEngine.NPCEngineException}
  commentId: '!:Global.Action{NPCEngine.NPCEngineException}'
  definition: Global.Action`1
  name: Action<NPCEngineException>
  nameWithType: Action<NPCEngineException>
  fullName: Action<NPCEngine.NPCEngineException>
  nameWithType.vb: Action(Of NPCEngineException)
  fullName.vb: Action(Of NPCEngine.NPCEngineException)
  name.vb: Action(Of NPCEngineException)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NPCEngine.NPCEngineException
    name: NPCEngineException
    nameWithType: NPCEngineException
    fullName: NPCEngine.NPCEngineException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NPCEngine.NPCEngineException
    name: NPCEngineException
    nameWithType: NPCEngineException
    fullName: NPCEngine.NPCEngineException
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: ContextType
  commentId: '!:ContextType'
  name: ContextType
  nameWithType: ContextType
  fullName: ContextType
- uid: Global.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NPCEngine.API.TextGeneration`1.GetSpecialTokens*
  commentId: Overload:NPCEngine.API.TextGeneration`1.GetSpecialTokens
  name: GetSpecialTokens
  nameWithType: TextGeneration<ContextType>.GetSpecialTokens
  fullName: NPCEngine.API.TextGeneration<ContextType>.GetSpecialTokens
  nameWithType.vb: TextGeneration(Of ContextType).GetSpecialTokens
  fullName.vb: NPCEngine.API.TextGeneration(Of ContextType).GetSpecialTokens
- uid: Global.Action{System.Collections.Generic.Dictionary{System.String,System.String}}
  commentId: '!:Global.Action{System.Collections.Generic.Dictionary{System.String,System.String}}'
  definition: Global.Action`1
  name: Action<Dictionary<String, String>>
  nameWithType: Action<Dictionary<String, String>>
  fullName: Action<System.Collections.Generic.Dictionary<System.String, System.String>>
  nameWithType.vb: Action(Of Dictionary(Of String, String))
  fullName.vb: Action(Of System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Action(Of Dictionary(Of String, String))
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NPCEngine.API.TextGeneration`1.GetPromptTemplate*
  commentId: Overload:NPCEngine.API.TextGeneration`1.GetPromptTemplate
  name: GetPromptTemplate
  nameWithType: TextGeneration<ContextType>.GetPromptTemplate
  fullName: NPCEngine.API.TextGeneration<ContextType>.GetPromptTemplate
  nameWithType.vb: TextGeneration(Of ContextType).GetPromptTemplate
  fullName.vb: NPCEngine.API.TextGeneration(Of ContextType).GetPromptTemplate
