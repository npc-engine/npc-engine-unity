### YamlMime:ManagedReference
items:
- uid: NPCEngine.API.Control
  commentId: T:NPCEngine.API.Control
  id: Control
  parent: NPCEngine.API
  children:
  - NPCEngine.API.Control.GetServiceMetadata(System.String,Action{NPCEngine.API.ServiceMetadata},Action{NPCEngine.NPCEngineException})
  - NPCEngine.API.Control.GetServicesMetadata(Action{System.Collections.Generic.List{NPCEngine.API.ServiceMetadata}},Action{NPCEngine.NPCEngineException})
  - NPCEngine.API.Control.GetServiceStatus(System.String,Action{NPCEngine.API.ServiceStatus},Action{NPCEngine.NPCEngineException})
  - NPCEngine.API.Control.RestartService(System.String,Action{NPCEngine.API.ServiceStatus},Action{NPCEngine.NPCEngineException})
  - NPCEngine.API.Control.StartService(System.String)
  - NPCEngine.API.Control.StartServiceNoConfirm(System.String)
  - NPCEngine.API.Control.StopService(System.String)
  - NPCEngine.API.Control.StopServiceNoConfirm(System.String)
  langs:
  - csharp
  - vb
  name: Control
  nameWithType: Control
  fullName: NPCEngine.API.Control
  type: Class
  source:
    id: Control
    path: ''
    startLine: 740
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  summary: "\n<code>Control</code> provides RPC interface to control service.\n"
  example: []
  syntax:
    content: 'public class Control : RPCBase'
    content.vb: >-
      Public Class Control

          Inherits RPCBase
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NPCEngine.API.Control.StartService(System.String)
  commentId: M:NPCEngine.API.Control.StartService(System.String)
  id: StartService(System.String)
  parent: NPCEngine.API.Control
  langs:
  - csharp
  - vb
  name: StartService(String)
  nameWithType: Control.StartService(String)
  fullName: NPCEngine.API.Control.StartService(System.String)
  type: Method
  source:
    id: StartService
    path: ''
    startLine: 753
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  syntax:
    content: public IEnumerator StartService(string service_id)
    parameters:
    - id: service_id
      type: System.String
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function StartService(service_id As String) As IEnumerator
  overload: NPCEngine.API.Control.StartService*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NPCEngine.API.Control.StopService(System.String)
  commentId: M:NPCEngine.API.Control.StopService(System.String)
  id: StopService(System.String)
  parent: NPCEngine.API.Control
  langs:
  - csharp
  - vb
  name: StopService(String)
  nameWithType: Control.StopService(String)
  fullName: NPCEngine.API.Control.StopService(System.String)
  type: Method
  source:
    id: StopService
    path: ''
    startLine: 770
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  syntax:
    content: public IEnumerator StopService(string service_id)
    parameters:
    - id: service_id
      type: System.String
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function StopService(service_id As String) As IEnumerator
  overload: NPCEngine.API.Control.StopService*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NPCEngine.API.Control.GetServiceStatus(System.String,Action{NPCEngine.API.ServiceStatus},Action{NPCEngine.NPCEngineException})
  commentId: M:NPCEngine.API.Control.GetServiceStatus(System.String,Action{NPCEngine.API.ServiceStatus},Action{NPCEngine.NPCEngineException})
  id: GetServiceStatus(System.String,Action{NPCEngine.API.ServiceStatus},Action{NPCEngine.NPCEngineException})
  parent: NPCEngine.API.Control
  langs:
  - csharp
  - vb
  name: GetServiceStatus(String, Action<ServiceStatus>, Action<NPCEngineException>)
  nameWithType: Control.GetServiceStatus(String, Action<ServiceStatus>, Action<NPCEngineException>)
  fullName: NPCEngine.API.Control.GetServiceStatus(System.String, Action<NPCEngine.API.ServiceStatus>, Action<NPCEngine.NPCEngineException>)
  type: Method
  source:
    id: GetServiceStatus
    path: ''
    startLine: 792
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  summary: "\nGet service status.\n"
  example: []
  syntax:
    content: public IEnumerator GetServiceStatus(string service_id, Action<ServiceStatus> outputCallback = null, Action<NPCEngineException> errorCallback = null)
    parameters:
    - id: service_id
      type: System.String
      description: ''
    - id: outputCallback
      type: Global.Action{NPCEngine.API.ServiceStatus}
      description: ''
    - id: errorCallback
      type: Global.Action{NPCEngine.NPCEngineException}
    return:
      type: System.Collections.IEnumerator
      description: ''
    content.vb: Public Function GetServiceStatus(service_id As String, outputCallback As Action(Of ServiceStatus) = Nothing, errorCallback As Action(Of NPCEngineException) = Nothing) As IEnumerator
  overload: NPCEngine.API.Control.GetServiceStatus*
  nameWithType.vb: Control.GetServiceStatus(String, Action(Of ServiceStatus), Action(Of NPCEngineException))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NPCEngine.API.Control.GetServiceStatus(System.String, Action(Of NPCEngine.API.ServiceStatus), Action(Of NPCEngine.NPCEngineException))
  name.vb: GetServiceStatus(String, Action(Of ServiceStatus), Action(Of NPCEngineException))
- uid: NPCEngine.API.Control.RestartService(System.String,Action{NPCEngine.API.ServiceStatus},Action{NPCEngine.NPCEngineException})
  commentId: M:NPCEngine.API.Control.RestartService(System.String,Action{NPCEngine.API.ServiceStatus},Action{NPCEngine.NPCEngineException})
  id: RestartService(System.String,Action{NPCEngine.API.ServiceStatus},Action{NPCEngine.NPCEngineException})
  parent: NPCEngine.API.Control
  langs:
  - csharp
  - vb
  name: RestartService(String, Action<ServiceStatus>, Action<NPCEngineException>)
  nameWithType: Control.RestartService(String, Action<ServiceStatus>, Action<NPCEngineException>)
  fullName: NPCEngine.API.Control.RestartService(System.String, Action<NPCEngine.API.ServiceStatus>, Action<NPCEngine.NPCEngineException>)
  type: Method
  source:
    id: RestartService
    path: ''
    startLine: 830
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  summary: "\nRestart service.\n"
  example: []
  syntax:
    content: public IEnumerator RestartService(string service_id, Action<ServiceStatus> outputCallback = null, Action<NPCEngineException> errorCallback = null)
    parameters:
    - id: service_id
      type: System.String
      description: Resolvable service name (i.e. id, type or API name)
    - id: outputCallback
      type: Global.Action{NPCEngine.API.ServiceStatus}
    - id: errorCallback
      type: Global.Action{NPCEngine.NPCEngineException}
    return:
      type: System.Collections.IEnumerator
      description: ''
    content.vb: Public Function RestartService(service_id As String, outputCallback As Action(Of ServiceStatus) = Nothing, errorCallback As Action(Of NPCEngineException) = Nothing) As IEnumerator
  overload: NPCEngine.API.Control.RestartService*
  nameWithType.vb: Control.RestartService(String, Action(Of ServiceStatus), Action(Of NPCEngineException))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NPCEngine.API.Control.RestartService(System.String, Action(Of NPCEngine.API.ServiceStatus), Action(Of NPCEngine.NPCEngineException))
  name.vb: RestartService(String, Action(Of ServiceStatus), Action(Of NPCEngineException))
- uid: NPCEngine.API.Control.GetServiceMetadata(System.String,Action{NPCEngine.API.ServiceMetadata},Action{NPCEngine.NPCEngineException})
  commentId: M:NPCEngine.API.Control.GetServiceMetadata(System.String,Action{NPCEngine.API.ServiceMetadata},Action{NPCEngine.NPCEngineException})
  id: GetServiceMetadata(System.String,Action{NPCEngine.API.ServiceMetadata},Action{NPCEngine.NPCEngineException})
  parent: NPCEngine.API.Control
  langs:
  - csharp
  - vb
  name: GetServiceMetadata(String, Action<ServiceMetadata>, Action<NPCEngineException>)
  nameWithType: Control.GetServiceMetadata(String, Action<ServiceMetadata>, Action<NPCEngineException>)
  fullName: NPCEngine.API.Control.GetServiceMetadata(System.String, Action<NPCEngine.API.ServiceMetadata>, Action<NPCEngine.NPCEngineException>)
  type: Method
  source:
    id: GetServiceMetadata
    path: ''
    startLine: 843
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  summary: "\nGet metadata for one service.\n"
  example: []
  syntax:
    content: public IEnumerator GetServiceMetadata(string service_id, Action<ServiceMetadata> outputCallback = null, Action<NPCEngineException> errorCallback = null)
    parameters:
    - id: service_id
      type: System.String
      description: Resolvable service name (i.e. id, type or API name)
    - id: outputCallback
      type: Global.Action{NPCEngine.API.ServiceMetadata}
      description: Callback action to consume results.
    - id: errorCallback
      type: Global.Action{NPCEngine.NPCEngineException}
    return:
      type: System.Collections.IEnumerator
      description: <code>ServiceMetadata</code> for resolved service.
    content.vb: Public Function GetServiceMetadata(service_id As String, outputCallback As Action(Of ServiceMetadata) = Nothing, errorCallback As Action(Of NPCEngineException) = Nothing) As IEnumerator
  overload: NPCEngine.API.Control.GetServiceMetadata*
  nameWithType.vb: Control.GetServiceMetadata(String, Action(Of ServiceMetadata), Action(Of NPCEngineException))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NPCEngine.API.Control.GetServiceMetadata(System.String, Action(Of NPCEngine.API.ServiceMetadata), Action(Of NPCEngine.NPCEngineException))
  name.vb: GetServiceMetadata(String, Action(Of ServiceMetadata), Action(Of NPCEngineException))
- uid: NPCEngine.API.Control.GetServicesMetadata(Action{System.Collections.Generic.List{NPCEngine.API.ServiceMetadata}},Action{NPCEngine.NPCEngineException})
  commentId: M:NPCEngine.API.Control.GetServicesMetadata(Action{System.Collections.Generic.List{NPCEngine.API.ServiceMetadata}},Action{NPCEngine.NPCEngineException})
  id: GetServicesMetadata(Action{System.Collections.Generic.List{NPCEngine.API.ServiceMetadata}},Action{NPCEngine.NPCEngineException})
  parent: NPCEngine.API.Control
  langs:
  - csharp
  - vb
  name: GetServicesMetadata(Action<List<ServiceMetadata>>, Action<NPCEngineException>)
  nameWithType: Control.GetServicesMetadata(Action<List<ServiceMetadata>>, Action<NPCEngineException>)
  fullName: NPCEngine.API.Control.GetServicesMetadata(Action<System.Collections.Generic.List<NPCEngine.API.ServiceMetadata>>, Action<NPCEngine.NPCEngineException>)
  type: Method
  source:
    id: GetServicesMetadata
    path: ''
    startLine: 855
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  summary: "\nGet metadata for all the services.\n"
  example: []
  syntax:
    content: public IEnumerator GetServicesMetadata(Action<List<ServiceMetadata>> outputCallback = null, Action<NPCEngineException> errorCallback = null)
    parameters:
    - id: outputCallback
      type: Global.Action{System.Collections.Generic.List{NPCEngine.API.ServiceMetadata}}
      description: Callback action to consume results.
    - id: errorCallback
      type: Global.Action{NPCEngine.NPCEngineException}
    return:
      type: System.Collections.IEnumerator
      description: A list of <code>ServiceMetadata</code> for each service.
    content.vb: Public Function GetServicesMetadata(outputCallback As Action(Of List(Of ServiceMetadata)) = Nothing, errorCallback As Action(Of NPCEngineException) = Nothing) As IEnumerator
  overload: NPCEngine.API.Control.GetServicesMetadata*
  nameWithType.vb: Control.GetServicesMetadata(Action(Of List(Of ServiceMetadata)), Action(Of NPCEngineException))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NPCEngine.API.Control.GetServicesMetadata(Action(Of System.Collections.Generic.List(Of NPCEngine.API.ServiceMetadata)), Action(Of NPCEngine.NPCEngineException))
  name.vb: GetServicesMetadata(Action(Of List(Of ServiceMetadata)), Action(Of NPCEngineException))
- uid: NPCEngine.API.Control.StopServiceNoConfirm(System.String)
  commentId: M:NPCEngine.API.Control.StopServiceNoConfirm(System.String)
  id: StopServiceNoConfirm(System.String)
  parent: NPCEngine.API.Control
  langs:
  - csharp
  - vb
  name: StopServiceNoConfirm(String)
  nameWithType: Control.StopServiceNoConfirm(String)
  fullName: NPCEngine.API.Control.StopServiceNoConfirm(System.String)
  type: Method
  source:
    id: StopServiceNoConfirm
    path: ''
    startLine: 862
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  syntax:
    content: public IEnumerator StopServiceNoConfirm(string service_id)
    parameters:
    - id: service_id
      type: System.String
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function StopServiceNoConfirm(service_id As String) As IEnumerator
  overload: NPCEngine.API.Control.StopServiceNoConfirm*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NPCEngine.API.Control.StartServiceNoConfirm(System.String)
  commentId: M:NPCEngine.API.Control.StartServiceNoConfirm(System.String)
  id: StartServiceNoConfirm(System.String)
  parent: NPCEngine.API.Control
  langs:
  - csharp
  - vb
  name: StartServiceNoConfirm(String)
  nameWithType: Control.StartServiceNoConfirm(String)
  fullName: NPCEngine.API.Control.StartServiceNoConfirm(System.String)
  type: Method
  source:
    id: StartServiceNoConfirm
    path: ''
    startLine: 867
  assemblies:
  - cs.temp.dll
  namespace: NPCEngine.API
  syntax:
    content: public IEnumerator StartServiceNoConfirm(string service_id)
    parameters:
    - id: service_id
      type: System.String
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function StartServiceNoConfirm(service_id As String) As IEnumerator
  overload: NPCEngine.API.Control.StartServiceNoConfirm*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NPCEngine.API
  commentId: N:NPCEngine.API
  name: NPCEngine.API
  nameWithType: NPCEngine.API
  fullName: NPCEngine.API
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NPCEngine.API.Control.StartService*
  commentId: Overload:NPCEngine.API.Control.StartService
  name: StartService
  nameWithType: Control.StartService
  fullName: NPCEngine.API.Control.StartService
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NPCEngine.API.Control.StopService*
  commentId: Overload:NPCEngine.API.Control.StopService
  name: StopService
  nameWithType: Control.StopService
  fullName: NPCEngine.API.Control.StopService
- uid: NPCEngine.API.Control.GetServiceStatus*
  commentId: Overload:NPCEngine.API.Control.GetServiceStatus
  name: GetServiceStatus
  nameWithType: Control.GetServiceStatus
  fullName: NPCEngine.API.Control.GetServiceStatus
- uid: Global.Action{NPCEngine.API.ServiceStatus}
  commentId: '!:Global.Action{NPCEngine.API.ServiceStatus}'
  definition: Global.Action`1
  name: Action<ServiceStatus>
  nameWithType: Action<ServiceStatus>
  fullName: Action<NPCEngine.API.ServiceStatus>
  nameWithType.vb: Action(Of ServiceStatus)
  fullName.vb: Action(Of NPCEngine.API.ServiceStatus)
  name.vb: Action(Of ServiceStatus)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NPCEngine.API.ServiceStatus
    name: ServiceStatus
    nameWithType: ServiceStatus
    fullName: NPCEngine.API.ServiceStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NPCEngine.API.ServiceStatus
    name: ServiceStatus
    nameWithType: ServiceStatus
    fullName: NPCEngine.API.ServiceStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Action{NPCEngine.NPCEngineException}
  commentId: '!:Global.Action{NPCEngine.NPCEngineException}'
  definition: Global.Action`1
  name: Action<NPCEngineException>
  nameWithType: Action<NPCEngineException>
  fullName: Action<NPCEngine.NPCEngineException>
  nameWithType.vb: Action(Of NPCEngineException)
  fullName.vb: Action(Of NPCEngine.NPCEngineException)
  name.vb: Action(Of NPCEngineException)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NPCEngine.NPCEngineException
    name: NPCEngineException
    nameWithType: NPCEngineException
    fullName: NPCEngine.NPCEngineException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NPCEngine.NPCEngineException
    name: NPCEngineException
    nameWithType: NPCEngineException
    fullName: NPCEngine.NPCEngineException
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NPCEngine.API.Control.RestartService*
  commentId: Overload:NPCEngine.API.Control.RestartService
  name: RestartService
  nameWithType: Control.RestartService
  fullName: NPCEngine.API.Control.RestartService
- uid: NPCEngine.API.Control.GetServiceMetadata*
  commentId: Overload:NPCEngine.API.Control.GetServiceMetadata
  name: GetServiceMetadata
  nameWithType: Control.GetServiceMetadata
  fullName: NPCEngine.API.Control.GetServiceMetadata
- uid: Global.Action{NPCEngine.API.ServiceMetadata}
  commentId: '!:Global.Action{NPCEngine.API.ServiceMetadata}'
  definition: Global.Action`1
  name: Action<ServiceMetadata>
  nameWithType: Action<ServiceMetadata>
  fullName: Action<NPCEngine.API.ServiceMetadata>
  nameWithType.vb: Action(Of ServiceMetadata)
  fullName.vb: Action(Of NPCEngine.API.ServiceMetadata)
  name.vb: Action(Of ServiceMetadata)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NPCEngine.API.ServiceMetadata
    name: ServiceMetadata
    nameWithType: ServiceMetadata
    fullName: NPCEngine.API.ServiceMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NPCEngine.API.ServiceMetadata
    name: ServiceMetadata
    nameWithType: ServiceMetadata
    fullName: NPCEngine.API.ServiceMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: NPCEngine.API.Control.GetServicesMetadata*
  commentId: Overload:NPCEngine.API.Control.GetServicesMetadata
  name: GetServicesMetadata
  nameWithType: Control.GetServicesMetadata
  fullName: NPCEngine.API.Control.GetServicesMetadata
- uid: Global.Action{System.Collections.Generic.List{NPCEngine.API.ServiceMetadata}}
  commentId: '!:Global.Action{System.Collections.Generic.List{NPCEngine.API.ServiceMetadata}}'
  definition: Global.Action`1
  name: Action<List<ServiceMetadata>>
  nameWithType: Action<List<ServiceMetadata>>
  fullName: Action<System.Collections.Generic.List<NPCEngine.API.ServiceMetadata>>
  nameWithType.vb: Action(Of List(Of ServiceMetadata))
  fullName.vb: Action(Of System.Collections.Generic.List(Of NPCEngine.API.ServiceMetadata))
  name.vb: Action(Of List(Of ServiceMetadata))
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NPCEngine.API.ServiceMetadata
    name: ServiceMetadata
    nameWithType: ServiceMetadata
    fullName: NPCEngine.API.ServiceMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NPCEngine.API.ServiceMetadata
    name: ServiceMetadata
    nameWithType: ServiceMetadata
    fullName: NPCEngine.API.ServiceMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NPCEngine.API.Control.StopServiceNoConfirm*
  commentId: Overload:NPCEngine.API.Control.StopServiceNoConfirm
  name: StopServiceNoConfirm
  nameWithType: Control.StopServiceNoConfirm
  fullName: NPCEngine.API.Control.StopServiceNoConfirm
- uid: NPCEngine.API.Control.StartServiceNoConfirm*
  commentId: Overload:NPCEngine.API.Control.StartServiceNoConfirm
  name: StartServiceNoConfirm
  nameWithType: Control.StartServiceNoConfirm
  fullName: NPCEngine.API.Control.StartServiceNoConfirm
